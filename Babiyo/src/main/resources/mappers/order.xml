<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mealmaker.babiyo.order">

<resultMap type="orderDto" id="orderResultMap">
<id column="NO" property="no"/>
<result column="MEMBER_ID" property="memberId"/>
<result column="ORDER_DATE" property="orderDate" javaType="java.util.Date"/>
<result column="TOTAL_AMOUNT" property="totalAmount"/>
<result column="PREVIEW" property="preview"/>
<result column="PRODUCT_QUANTITY" property="productQuantity"/>
<result column="RECEIVER_NAME" property="receiverName"/>
<result column="RECEIVER_PHONE" property="receiverPhone"/>
<result column="POST" property="post"/>
<result column="ADDRESS" property="address"/>
<result column="ADDRESS_DETAIL" property="addressDetail"/>
<result column="REQUEST" property="request"/>
<result column="STATE_CODE" property="stateCode"/>
<result column="STATE_NAME" property="stateName"/>
<result column="REVIEWCHECK" property="reviewCheck"/>
</resultMap>


<resultMap type="orderDetailDto" id="orderDetailResultMap">
<result column="ORDER_NO" property="orderNo"/>
<result column="ORDER_DATE" property="orderDate" javaType="java.util.Date"/>
<result column="MEMBER_ID" property="memberId"/>
<result column="PRODUCT_NO" property="productNo"/>
<result column="PRODUCT_NAME" property="productName"/>
<result column="QUANTITY" property="quantity"/>
<result column="PRICE" property="price"/>
</resultMap>


<select id="lastOrder" resultMap="orderResultMap" parameterType="String">
SELECT O.NO, 
	   O.RECEIVER_NAME, 
	   O.ADDRESS, 
	   O.ADDRESS_DETAIL, 
	   O.REQUEST, 
	   T.TOTAL_AMOUNT
FROM MEMBER_ORDER O JOIN(
	SELECT ORDER_NO, 
		   SUM(QUANTITY * PRICE) TOTAL_AMOUNT
    FROM ORDER_DETAIL
    GROUP BY ORDER_NO
) AS T
ON O.NO = T.ORDER_NO
WHERE MEMBER_ID = #{memberId}
ORDER BY ORDER_DATE DESC
LIMIT 1;
</select>

<select id="orderView" resultMap="orderResultMap" parameterType="int">
SELECT O.NO, 
	   O.ORDER_DATE, 
	   O.RECEIVER_NAME, 
	   O.RECEIVER_PHONE, 
	   O.POST, O.ADDRESS, 
	   O.ADDRESS_DETAIL, 
	   O.REQUEST, 
	   T.TOTAL_AMOUNT, 
	   S.NAME STATE_NAME
FROM MEMBER_ORDER O JOIN ORDER_STATE S
ON O.STATE_CODE = S.CODE JOIN(
	SELECT ORDER_NO, 
		   SUM(QUANTITY * PRICE) TOTAL_AMOUNT
    FROM ORDER_DETAIL
    GROUP BY ORDER_NO
) AS T
ON O.NO = T.ORDER_NO
WHERE NO = ${value}
</select>

<select id="orderDetailView" resultMap="orderDetailResultMap" parameterType="int">
SELECT D.PRODUCT_NO, 
	   D.PRODUCT_NAME, 
	   D.QUANTITY, 
	   D.PRICE,
	   M.MEMBER_ID,
	   M.ORDER_DATE
FROM ORDER_DETAIL D JOIN MEMBER_ORDER M
ON M.NO = D.ORDER_NO
WHERE M.NO = ${value}
</select>

<insert id="order" parameterType="orderDto" useGeneratedKeys="true" keyColumn="NO" keyProperty="no">
INSERT INTO MEMBER_ORDER(
	MEMBER_ID,
	ORDER_DATE,
	RECEIVER_NAME,
	RECEIVER_PHONE,
	POST,
	ADDRESS,
	ADDRESS_DETAIL,
	REQUEST,
	STATE_CODE
) VALUES(
	#{memberId}, 
	SYSDATE(),
	#{receiverName}, 
	#{receiverPhone}, 
	#{post}, 
	#{address}, 
	#{addressDetail},
	#{request}, 
	1
)
</insert>

<insert id="orderDetail" parameterType="orderDetailDto">
INSERT INTO ORDER_DETAIL(
	ORDER_NO, 
	PRODUCT_NO,
	PRODUCT_NAME, 
	QUANTITY, 
	PRICE
) VALUES
<foreach collection="orderDetailList" item="detail" separator=",">
(${orderNo}, 
${detail.productNo},
#{detail.productName},
${detail.quantity}, 
${detail.price})
</foreach>
</insert>

<select id="orderCount" parameterType="map" resultType="int">
SELECT COUNT(*)
FROM MEMBER_ORDER
<where>
<if test="id != null">MEMBER_ID = #{id}</if>
<if test="search != null and search != ''">AND MEMBER_ID = #{search}</if>
<if test="stateCode != 0">AND STATE_CODE = ${stateCode}</if>
<if test="beginDate != null">
	AND ORDER_DATE >= #{beginDate} 
	AND <![CDATA[ORDER_DATE < DATE_ADD(#{endDate}, INTERVAL 1 DAY)]]>
</if>
</where>
</select>

<select id="orderList" parameterType="map" resultMap="orderResultMap">
SELECT ORDER_DATE, 
	   MEMBER_ID, 
	   O.NO, 
	   P.PREVIEW, 
	   P.PRODUCT_QUANTITY, 
	   P.TOTAL_AMOUNT, 
	   STATE_CODE, 
	   STATE_NAME
FROM(
	SELECT O.ORDER_DATE, 
		   O.MEMBER_ID, 
		   O.NO, 
		   S.CODE STATE_CODE, 
		   S.NAME STATE_NAME
	FROM MEMBER_ORDER O JOIN ORDER_STATE S
	ON O.STATE_CODE = S.CODE
	<where>
	<if test="id != null">O.MEMBER_ID = #{id}</if>
	<if test="search != null and search != ''">AND O.MEMBER_ID = #{search}</if>
	<if test="stateCode != 0">AND O.STATE_CODE = ${stateCode}</if>
	<if test="beginDate != null">
		AND O.ORDER_DATE >= #{beginDate}
		AND <![CDATA[O.ORDER_DATE <= DATE_ADD(#{endDate}, INTERVAL 1 DAY)]]>
	</if>
	</where>
) AS O LEFT OUTER JOIN (
	SELECT O.NO,
		   MIN(D.PRODUCT_NAME) PREVIEW, 
		   COUNT(*) PRODUCT_QUANTITY,
		   SUM(D.QUANTITY * D.PRICE) TOTAL_AMOUNT
 	FROM MEMBER_ORDER O JOIN ORDER_DETAIL D
	ON O.NO = D.ORDER_NO
  	GROUP BY O.NO ) AS P
ON O.NO = P.NO
ORDER BY ORDER_DATE DESC
LIMIT ${begin}, 10
</select>	

<update id="orderCancel" parameterType="int">
UPDATE MEMBER_ORDER
SET STATE_CODE = 3
WHERE NO = ${value}
</update>

<select id="orderStateList" resultType="com.mealmaker.babiyo.order.model.OrderStateDto">
SELECT CODE "code", 
	   NAME "name"
FROM ORDER_STATE
</select>

<update id="orderAccept" parameterType="int">
UPDATE MEMBER_ORDER
SET STATE_CODE = 2
WHERE NO = ${value}
</update>

<insert id="orderInsert" parameterType="orderDetailDto">
INSERT INTO SALES(
	MEMBER_ID,
	ORDER_DATE,
	PRODUCT_NO,
	PRODUCT_NAME,
	QUANTITY,
	PRICE
) VALUES
<foreach collection="list" item="order" separator=",">
	(#{order.memberId},
	#{order.orderDate},
	${order.productNo},
	#{order.productName},
	${order.quantity},
	${order.price})
</foreach>
</insert>

<select id="waitOrderCount" resultType="int">
SELECT COUNT(*)
FROM MEMBER_ORDER
WHERE STATE_CODE = 1
</select>

<select id="orderDetailList" parameterType="com.mealmaker.babiyo.util.SearchOption"
	 resultMap="orderDetailResultMap">
SELECT MEMBER_ID, 
	   ORDER_DATE, 
	   PRODUCT_NAME, 
	   QUANTITY, 
	   PRICE, 
	   QUANTITY * PRICE TOTAL_AMOUNT
FROM SALES
WHERE ORDER_DATE >= #{beginDate} 
AND <![CDATA[ORDER_DATE < DATE_ADD(#{endDate}, INTERVAL 1 DAY)]]>
<if test="search != ''">
<choose>
<when test="searchOption == ''">
	AND (MEMBER_ID LIKE CONCAT('%',#{search},'%')
	OR PRODUCT_NAME LIKE CONCAT('%',#{search},'%'))
</when>
<otherwise>
	AND ${searchOption} LIKE CONCAT('%',#{search},'%')
</otherwise>
</choose>
</if>
<choose>
<when test="sort != ''">ORDER BY ${sort}</when>
<otherwise>ORDER BY ORDER_DATE DESC</otherwise>
</choose>
</select>

<select id="totalAmountView" parameterType="int" resultMap="orderResultMap">
SELECT TOTAL_AMOUNT, 
	   MEMBER_ID
FROM MEMBER_ORDER O JOIN (
	SELECT ORDER_NO, 
		   SUM(QUANTITY * PRICE) TOTAL_AMOUNT
    FROM ORDER_DETAIL
    GROUP BY ORDER_NO
) AS T
ON O.NO = T.ORDER_NO
WHERE NO = #{value}
</select>

<select id="salesChart" resultType="com.mealmaker.babiyo.order.model.SalesCharDto">
SELECT D.WEEK "week", 
	   COALESCE(S.TOTAL_AMOUNT, 0) "totalAmount"
FROM(
	SELECT SUM(QUANTITY * PRICE) TOTAL_AMOUNT, 
		   DATE_FORMAT(ORDER_DATE,'%Y-%m-%d') ORDER_DATE
	FROM SALES
	WHERE ORDER_DATE >= DATE_SUB(NOW(),INTERVAL 6 DAY)
	GROUP BY DATE_FORMAT(ORDER_DATE,'%Y-%m-%d')
) AS S RIGHT OUTER JOIN (
	SELECT DATE_FORMAT(CURDATE(),'%Y-%m-%d') "WEEK" FROM DUAL
	UNION ALL
	SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 1 DAY),'%Y-%m-%d') FROM DUAL
	UNION ALL
	SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 2 DAY),'%Y-%m-%d') FROM DUAL
	UNION ALL
	SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 3 DAY),'%Y-%m-%d') FROM DUAL
	UNION ALL
	SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 4 DAY),'%Y-%m-%d') FROM DUAL
	UNION ALL
	SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 5 DAY),'%Y-%m-%d') FROM DUAL
	UNION ALL
	SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 6 DAY),'%Y-%m-%d') FROM DUAL
) AS D
ON S.ORDER_DATE = D.WEEK
ORDER BY D.WEEK ASC
</select>

<select id="productChart" resultType="com.mealmaker.babiyo.order.model.ProductChartDto">
SELECT PRODUCT_NAME "name", 
	   COUNT "count"
FROM (
	SELECT PRODUCT_NAME, 
		   SUM(QUANTITY) COUNT
	FROM SALES
	WHERE ORDER_DATE >= DATE_SUB(CURDATE(),INTERVAL 6 DAY)
	GROUP BY PRODUCT_NO, 
			 PRODUCT_NAME
	HAVING COUNT(*) > 0
	ORDER BY COUNT DESC
) AS DOP
LIMIT 7
</select>

<select id="memberHomeOrderCount" resultType="int">
SELECT COUNT(*)
FROM MEMBER_ORDER
WHERE MEMBER_ID = #{value}
AND STATE_CODE != 3
</select>

<select id="orderId" resultType="String">
SELECT MEMBER_ID
FROM MEMBER_ORDER
WHERE NO = ${value}
</select>


</mapper>